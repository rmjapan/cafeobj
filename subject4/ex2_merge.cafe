
mod* TRIV-ERR { 
    [Elt Err < Elt&Err]
    op err : -> Err .
}
mod* TRIV-ERR-ORD {
    [Elt Err < Elt&Err]
    op err : -> Err . -- errはErr型である.
    op ord : Elt Elt -> Bool . -- ordはElt型の要素を比較する.
}

mod! STRING-ERR { 
    pr(STRING)
    [String ErrString < String&Err]
    op errStr : -> ErrString {constr} . 
}
view TRIV-ERR-ORD2STRING-ERR from TRIV-ERR-ORD to STRING-ERR {
    sort Elt -> String,
    sort Err -> ErrString,
    sort Elt&Err -> String&Err,
    op err -> errStr,
    op ord -> string<,
}

mod! NAT-ERR {
    pr(NAT) -- NATモジュールをインポート（上書き禁止）
    [Nat ErrNat < Nat&Err]
    op errNat : -> ErrNat {constr} . -- errNatはErrNat型である.
    op p_ : Zero -> ErrNat . -- 0 - 1はErrNat
    op p_ : ErrNat -> ErrNat .
    op p_ : Nat&Err -> Nat&Err .
    op _quo_ : Nat&Err Zero -> ErrNat . -- 0 / 0はErrNat
    op _quo_ : Nat&Err ErrNat -> ErrNat .
    op _quo_ : ErrNat Nat&Err -> ErrNat .
    op _quo_ : Nat&Err Nat&Err -> Nat&Err .
    var NE : Nat&Err .
    eq p 0 = errNat .
    eq p errNat = errNat .
    eq NE quo 0 = errNat .
    eq NE quo errNat = errNat .
    eq errNat quo NE = errNat .
}

view TRIV-ERR2NAT-ERR from TRIV-ERR to NAT-ERR {
    sort Elt -> Nat,
    sort Err -> ErrNat,
    sort Elt&Err -> Nat&Err,
    op err -> errNat,
}

mod! GLIST-ERR(E :: TRIV-ERR) {
    -- OrderSorts
    [Nil NnList < List]
    [List ErrList < List&Err]
    op nil : -> Nil {constr} .
    op _|_ : Elt.E List -> NnList {constr} . -- 非空リスト
    op errList : -> ErrList {constr} .
    op _|_ : Elt&Err.E List&Err -> List&Err .
    op _@_ : List  List -> List . -- concat
    op _@_ : ErrList List&Err -> ErrList .
    op _@_ : List&Err ErrList -> ErrList .
    op _@_ : List&Err List&Err -> List&Err .
    op hd : Nil -> Err.E . -- 空リストの先頭要素はErr型
    op hd : NnList -> Elt.E . -- 非空リストの先頭要素は何でも型
    op hd : ErrList -> Err.E .
    op hd : List&Err -> Elt&Err.E .
    op tl : Nil -> ErrList .
    op tl : NnList -> List .
    op tl : ErrList -> ErrList .
    op tl : List&Err -> List&Err .
    op if_then{_}else{_} : Bool List&Err List&Err -> List&Err .
    var X : Elt.E 
    vars L L2 : List .
    var XE : Elt&Err.E .
    vars LE LE2 : List&Err .
    eq err.E | LE = errList .
    eq XE | errList = errList .
    eq hd(nil) = err.E .
    eq hd(X | L) = X .
    eq hd(errList) = err.E .

    eq tl(nil) = errList .
    eq tl(X | L) = L .
    eq tl(errList) = errList .
    eq nil @ L2 = L2 .
    eq (X | L) @ L2 = X | (L @ L2) .
    eq errList @ LE = errList .
    eq LE @ errList = errList .
    eq hd(nil) = err.E .
    eq hd(X | L) = X .
    eq tl(nil) = nil .
    eq tl(X | L) = L .
    eq tl(errList) = errList .
    eq nil @ L2 = L2 .
    eq (X | L) @ L2 = X | (L @ L2) .
    eq if true then {LE} else {LE2} = LE .
    eq if false then {LE} else {LE2} = LE2 .
}
mod! GLIST-ERR-ORD(E :: TRIV-ERR-ORD) {
    -- OrderSorts
    [Nil NnList < List]
    [List ErrList < List&Err]
    op nil : -> Nil {constr} .
    op _|_ : Elt.E List -> NnList {constr} . -- 非空リスト
    op errList : -> ErrList {constr} .
    op _|_ : Elt&Err.E List&Err -> List&Err .
    op _@_ : List  List -> List . -- concat
    op _@_ : ErrList List&Err -> ErrList .
    op _@_ : List&Err ErrList -> ErrList .
    op _@_ : List&Err List&Err -> List&Err .
    op hd : Nil -> Err.E . -- 空リストの先頭要素はErr型
    op hd : NnList -> Elt.E . -- 非空リストの先頭要素は何でも型
    op hd : ErrList -> Err.E .
    op hd : List&Err -> Elt&Err.E .
    op tl : Nil -> ErrList .
    op tl : NnList -> List .
    op tl : ErrList -> ErrList .
    op tl : List&Err -> List&Err .
    op if_then{_}else{_} : Bool List&Err List&Err -> List&Err .
    op ord : List List -> Bool .
    vars X Y : Elt.E 
    vars L L2 : List .
    var XE : Elt&Err.E .
    vars LE LE2 : List&Err .
    eq err.E | LE = errList .
    eq XE | errList = errList .
    eq hd(nil) = err.E .
    eq hd(X | L) = X .
    eq hd(errList) = err.E .

    eq tl(nil) = errList .
    eq tl(X | L) = L .
    eq tl(errList) = errList .
    eq nil @ L2 = L2 .
    eq (X | L) @ L2 = X | (L @ L2) .
    eq errList @ LE = errList .
    eq LE @ errList = errList .
    eq hd(nil) = err.E .
    eq hd(X | L) = X .
    eq tl(nil) = nil .
    eq tl(X | L) = L .
    eq tl(errList) = errList .
    eq nil @ L2 = L2 .
    eq (X | L) @ L2 = X | (L @ L2) .
    eq if true then {LE} else {LE2} = LE .
    eq if false then {LE} else {LE2} = LE2 .
    eq ord(nil,nil) = false .
    eq ord(nil,Y | L2) = true .
    eq ord(X | L,nil) = false .
    eq ord(X | L,Y | L2) = ord.E(X,Y) or  ((not ord.E(Y,X)) and ord(L,L2)) .
}



view TRIV-ERR-ORD2NAT-ERR from TRIV-ERR-ORD to NAT-ERR {
    sort Elt -> Nat,
    sort Err -> ErrNat,
    sort Elt&Err -> Nat&Err,
    op err -> errNat,
    op ord -> _<_,
}
mod! NATLIST9 {
    pr(GLIST-ERR-ORD(E <= TRIV-ERR-ORD2NAT-ERR)
    * {
    sort List -> NatList,
    sort Nil -> NLNil,
    sort NnList -> NnNatList,
    sort ErrList -> ErrNatList,
    sort List&Err -> NatList&Err,
    op nil -> nlnil,
    op errList -> errNatList } )
}
view TRIV-ERR-ORD2NATLIST9 from TRIV-ERR-ORD to NATLIST9 {
    sort Elt -> NatList,
    sort Err -> ErrNatList,
    sort Elt&Err -> NatList&Err,
    op err -> errNatList,
    op ord -> ord,
}
mod! STRLIST1 {
    pr(GLIST-ERR-ORD(E <= TRIV-ERR-ORD2STRING-ERR)
    * {
        sort List -> StrList,
        sort Nil -> SLNil,
        sort NnList -> NnStrList,
        sort ErrList -> ErrStrList,
        sort List&Err -> StrList&Err,
        op nil -> slnil,
        op errList -> errStrList 
        } 
    )
}
view TRIV-ERR-ORD2STRLIST1 from TRIV-ERR-ORD to STRLIST1 {
    sort Elt -> StrList,
    sort Err -> ErrStrList,
    sort Elt&Err -> StrList&Err,
    op err -> errStrList,
    op ord -> ord,
}

mod! GMERGESORT(E :: TRIV-ERR-ORD) {
  pr(GLIST-ERR(E)) -- エラーを含むリスト機能
  [PairOfLists]
  
  -- シグネチャ
  op pair : List List -> PairOfLists {constr} . -- LISTのペアを作る
  op left : PairOfLists -> List . -- 左のリスト
  op right : PairOfLists -> List . -- 右のリスト
  op mergesort : List -> List .
  op merge : List List -> List .
  op split : List -> PairOfLists .
  vars L1 L2 : List .

  -- 変数
  vars X Y : Elt.E . -- 要素
  vars L : List . -- リスト

  -- 等式
  eq left(pair(L1, L2)) = L1 .
  eq right(pair(L1, L2)) = L2 .
  eq merge(nil, L2) = L2 . -- 空リストとリストのマージ
  eq merge(L1, nil) = L1 . -- リストと空リストのマージ
  eq merge(X | L1, Y | L2) =
    if ord.E(X,Y) then { X | merge(L1, Y | L2) }
    else { Y | merge(X | L1, L2) } . 
  eq mergesort(nil) = nil . -- 空リストのソート
  eq mergesort(X | nil) = X | nil . -- 1要素のリストのソート
  eq mergesort(L) =
    merge(mergesort(left(split(L))), mergesort(right(split(L)))) .
  eq split(nil) = pair(nil, nil) .
  eq split(X | nil) = pair(X | nil, nil) .
  eq split(X | Y | L) = pair(X | left(split(L)), Y | right(split(L))) .
}




-- 自然数リストのソート
open GMERGESORT(E <= TRIV-ERR-ORD2NAT-ERR) .
    red mergesort(4 | 7 | 5 | 1 | 0 | 3 | 6 | 2 | nil) .
close
-- set trace off .

-- 文字列のソート
open GMERGESORT(E <= TRIV-ERR-ORD2STRING-ERR) .
    red mergesort("Lisp" | "Python" | "Pascal" | "CafeOBJ" | "C" |
    "Java" | "Prolog" | "Fortran" | nil) .
close

-- 自然数リストのソート
open GMERGESORT(E <= TRIV-ERR-ORD2NATLIST9) .
    red mergesort((1 | 2 | nlnil) | (3 | 0 | 2 | nlnil) | (2 | nlnil) |
    (0 | nlnil) | nlnil | (1 | 1 | nlnil) | (3 | 0 | 1 | nlnil) |
    (1 | 0 | nlnil) | nil) .
close

-- 文字列リストのソート
open GMERGESORT(E <= TRIV-ERR-ORD2STRLIST1) .
    red mergesort(("CafeOBJ" | "Fortran" | slnil) |
    ("Java" | "C" | "Fortran" | slnil) | ("Fortran" | slnil) |
    ("C" | slnil) | slnil | ("CafeOBJ" | "CafeOBJ" | slnil) |
    ("Java" | "C" | "CafeOBJ" | slnil) | ("CafeOBJ" | "C" | slnil) | nil) .
close